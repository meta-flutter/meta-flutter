From 437adec26e1dff21d548ea98bd5e1c8501e04383 Mon Sep 17 00:00:00 2001
From: Joel Winarske <joel.winarske@gmail.com>
Date: Wed, 24 Aug 2022 08:11:05 -0700
Subject: [PATCH] flutter-pi bundle path compliance

-Sets up path locations to be conformant to bundle folder structure

Signed-off-by: Joel Winarske <joel.winarske@gmail.com>
---
 include/flutter-pi.h |  1 +
 src/flutter-pi.c     | 31 ++++++++++++++++---------------
 2 files changed, 17 insertions(+), 15 deletions(-)

diff --git a/include/flutter-pi.h b/include/flutter-pi.h
index ad95ad3..f11e2c4 100644
--- a/include/flutter-pi.h
+++ b/include/flutter-pi.h
@@ -336,6 +336,7 @@ struct flutterpi {
 	
 	/// flutter stuff
 	struct {
+		char *bundle_path;
 		char *asset_bundle_path;
 		char *kernel_blob_path;
 		char *app_elf_path;
diff --git a/src/flutter-pi.c b/src/flutter-pi.c
index 28fbf6d..9910757 100644
--- a/src/flutter-pi.c
+++ b/src/flutter-pi.c
@@ -70,14 +70,14 @@ USAGE:\n\
 \n\
 OPTIONS:\n\
   --release                  Run the app in release mode. The AOT snapshot\n\
-                             of the app (\"app.so\") must be located inside the\n\
-                             asset bundle directory.\n\
+                             of the app (\"libapp.so\") must be located inside the\n\
+                             lib folder of the bundle directory.\n\
                              This also requires a libflutter_engine.so that was\n\
                              built with --runtime-mode=release.\n\
                              \n\
   --profile                  Run the app in profile mode. The AOT snapshot\n\
-                             of the app (\"app.so\") must be located inside the\n\
-                             asset bundle directory.\n\
+                             of the app (\"libapp.so\") must be located inside the\n\
+                             lib folder of the bundle directory.\n\
                              This also requires a libflutter_engine.so that was\n\
                              built with --runtime-mode=profile.\n\
                              \n\
@@ -1825,7 +1825,7 @@ static int init_application(void) {
     char *libflutter_engine_path;
     int ok;
 
-    asprintf(&libflutter_engine_path, "%s/libflutter_engine.so", flutterpi.flutter.asset_bundle_path);
+    asprintf(&libflutter_engine_path, "%s/lib/libflutter_engine.so", flutterpi.flutter.bundle_path);
 
     libflutter_engine_handle = NULL;
 
@@ -2004,7 +2004,7 @@ static int init_application(void) {
         LOG_ERROR(
             "The flutter engine was built for release or profile (AOT) mode, but flutter-pi was not started up in release or profile mode.\n"
             "Either you swap out the libflutter_engine.so with one that was built for debug mode, or you start"
-            "flutter-pi with the --release or --profile flag and make sure a valid \"app.so\" is located inside the asset bundle directory.\n"
+            "flutter-pi with the --release or --profile flag and make sure a valid \"libapp.so\" is located inside the lib folder of the bundle directory.\n"
         );
         return EINVAL;
     } else if ((engine_is_aot == false) && (flutterpi.flutter.runtime_mode != kDebug)) {
@@ -2299,30 +2299,30 @@ static bool setup_paths(void) {
     char *kernel_blob_path, *icu_data_path, *app_elf_path;
     #define PATH_EXISTS(path) (access((path),R_OK)==0)
 
-    if (!PATH_EXISTS(flutterpi.flutter.asset_bundle_path)) {
-        LOG_ERROR("Asset Bundle Directory \"%s\" does not exist\n", flutterpi.flutter.asset_bundle_path);
+    if (!PATH_EXISTS(flutterpi.flutter.bundle_path)) {
+        LOG_ERROR("Bundle Directory \"%s\" does not exist\n", flutterpi.flutter.bundle_path);
         return false;
     }
 
     asprintf(&kernel_blob_path, "%s/kernel_blob.bin", flutterpi.flutter.asset_bundle_path);
-    asprintf(&app_elf_path, "%s/app.so", flutterpi.flutter.asset_bundle_path);
+    asprintf(&app_elf_path, "%s/lib/libapp.so", flutterpi.flutter.bundle_path);
 
     if (flutterpi.flutter.runtime_mode == kDebug) {
         if (!PATH_EXISTS(kernel_blob_path)) {
-            LOG_ERROR("Could not find \"kernel.blob\" file inside \"%s\", which is required for debug mode.\n", flutterpi.flutter.asset_bundle_path);
+            LOG_ERROR("Could not find \"kernel_blob.bin\" file inside \"%s\", which is required for debug mode.\n", flutterpi.flutter.asset_bundle_path);
             return false;
         }
     } else if ((flutterpi.flutter.runtime_mode == kRelease) || (flutterpi.flutter.runtime_mode == kProfile)) {
         if (!PATH_EXISTS(app_elf_path)) {
-            LOG_ERROR("Could not find \"app.so\" file inside \"%s\", which is required for release and profile mode.\n", flutterpi.flutter.asset_bundle_path);
+            LOG_ERROR("Could not find \"libapp.so\" file inside \"%s/lib\", which is required for release and profile mode.\n", flutterpi.flutter.bundle_path);
             return false;
         }
     }
 
-    asprintf(&icu_data_path, "%s/icudtl.dat", flutterpi.flutter.asset_bundle_path);
+    asprintf(&icu_data_path, "%s/data/icudtl.dat", flutterpi.flutter.bundle_path);
     if (!PATH_EXISTS(icu_data_path)) {
         free(icu_data_path);
-        asprintf(&icu_data_path, "/usr/lib/icudtl.dat");
+        asprintf(&icu_data_path, "/usr/share/flutter/icudtl.dat");
         if (!PATH_EXISTS(icu_data_path)) {
             LOG_ERROR("Could not find \"icudtl.dat\" file inside asset bundle or \"/usr/lib/\".\n");
             return false;
@@ -2463,12 +2463,13 @@ static bool parse_cmd_args(int argc, char **argv) {
 
 
     if (optind >= argc) {
-        LOG_ERROR("ERROR: Expected asset bundle path after options.\n");
+        LOG_ERROR("ERROR: Expected bundle path after options.\n");
         printf("%s", usage);
         return false;
     }
 
-    flutterpi.flutter.asset_bundle_path = realpath(argv[optind], NULL);
+    flutterpi.flutter.bundle_path = realpath(argv[optind], NULL);
+    asprintf(&flutterpi.flutter.asset_bundle_path, "%s/data/flutter_assets", flutterpi.flutter.bundle_path);
     flutterpi.flutter.runtime_mode = runtime_mode_int;
 
     argv[optind] = argv[0];
-- 
2.25.1

