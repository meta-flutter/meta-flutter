#
# Variscite Symphony Carrier Board + Variscite DART-MX8M-MINI module
#
# https://variwiki.com/index.php?title=Yocto_Build_Release&release=RELEASE_DUNFELL_V1.7_DART-MX8M-MINI
#

name: dunfell-dart-mx8m-mini

on:
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
  release:
    types: [ published, created, edited ]
  workflow_dispatch:
  schedule:
    # daily
    - cron:  '0 0 * * *'

jobs:

  dunfell-dart-mx8m-mini:
  
    env:
      YOCTO_BRANCH: dunfell
      YOCTO_VERSION: 3.1.27
      MACHINE: imx8mm-var-dart
      DISTRO: fslc-wayland
      
    runs-on: [self-hosted, linux]
    
    container:
      image: ghcr.io/meta-flutter/meta-flutter/ubuntu-18-dev:main
      options:
        --user 1001:1001
        --ipc host
        --privileged
        --security-opt label=disable
        --pid host
        --userns keep-id
        --ulimit host 
        --mount type=devpts,destination=/dev/pts
        --security-opt label=disable
        -v /mnt/raid10/github-ci/download:/home/dev/dl:Z
        -v /mnt/raid10/github-ci/sstate/yocto/dunfell/dart-mx8m-mini:/home/dev/sstate:Z
        -v /mnt/raid10/github-ci/artifacts/dart-mx8m-mini:/home/dev/artifacts:Z


    steps:
    
      - name: Display UID Info
        run: |
          whoami
          id -u
          
      - name: Set Ownership
        run: |
          chown -R dev:dev $HOME .
          
      - uses: actions/checkout@v3
        with:
          path: ''

      - name: Fetch poky
        run: |
          [ -d ../${{ env.MACHINE }} ] || mkdir -p ../${{ env.MACHINE }}
          cd ../${{ env.MACHINE }}
          rm -rf sources || true
          ls -la
          git config --list
          git config --global user.email joel@winarske@gmail.com
          git config --global user.name "Joel Winarske"
          git config --list
          /home/dev/bin/repo init -u https://github.com/varigit/variscite-bsp-platform.git -b $YOCTO_BRANCH -m default.xml
          /home/dev/bin/repo sync --force-sync --no-clone-bundle -j `grep -c ^processor /proc/cpuinfo` &
          git clone -b dunfell-clang12 --single-branch https://github.com/kraj/meta-clang.git sources/meta-clang &
          git clone -b dunfell --single-branch https://github.com/meta-flutter/meta-flutter-plugins.git sources/meta-flutter-plugins &
          wait

      - name: Configure build
        shell: bash
        working-directory: ../${{ env.MACHINE }}
        run: |
          env
          rm -rf build/conf || true
          . sources/poky/oe-init-build-env build
          sed -i '/MACHINE ??=/d' ./conf/local.conf
          sed -i '/DISTRO ?=/d' ./conf/local.conf
          echo "MACHINE ??= \"${{ env.MACHINE }}\"" >> ./conf/local.conf
          echo "DISTRO ?= \"${{ env.DISTRO }}\"" >> ./conf/local.conf
          echo 'CONF_VERSION = "1"' >> ./conf/local.conf
          echo 'ACCEPT_FSL_EULA = "1"' >> ./conf/local.conf
          echo '***************************************'
          echo 'INHERIT += "rm_work"' >> ./conf/local.conf
          echo 'DL_DIR = "/home/dev/dl"' >> ./conf/local.conf
          echo 'SSTATE_DIR = "/home/dev/sstate"' >> ./conf/local.conf
          echo 'SSTATE_MIRRORS = "file://.* file:///home/dev/sstate/PATH"' >> ./conf/local.conf
          echo 'SSTATE_MIRRORS += "file://.* http://sstate.yoctoproject.org/${{ env.YOCTO_VERSION }}/PATH;downloadfilename=PATH"' >> ./conf/local.conf
          sed -i "/GLIBC_GENERATE_LOCALES/d" ./conf/local.conf
          echo 'GLIBC_GENERATE_LOCALES = "en_US.UTF-8"' >> ./conf/local.conf
          sed -i "/IMAGE_LINGUAS/d" ./conf/local.conf
          echo 'IMAGE_LINGUAS = "en-us"' >> ./conf/local.conf
          echo 'PACKAGECONFIG_pn-flutter-auto = "gles2 context_version_2"' >> ./conf/bblayers.conf
          echo 'CLANGSDK = "1"' >> ./conf/local.conf
          echo 'TOOLCHAIN_HOST_TASK_append = " nativesdk-flutter-sdk"' >> ./conf/local.conf
          echo 'PREFERRED_PROVIDER_libserialport = "6f9b03e"' >> ./conf/local.conf
          echo 'TOOLCHAIN_HOST_TASK_append = " nativesdk-flutter-sdk"' >> ./conf/local.conf 
          echo 'IMAGE_INSTALL_append = " \
              libserialport \
              gstreamer1.0-libav \
              gstreamer1.0-plugins-bad \
              gstreamer1.0-plugins-good \
              gstreamer1.0-plugins-ugly \
              "' >> ./conf/local.conf
          echo 'PREFERRED_VERSION_cmake = "3.22.3"' >> ./conf/local.conf
          echo 'PREFERRED_VERSION_cmake-native = "3.22.3"' >> ./conf/local.conf
          echo 'PREFERRED_VERSION_nativesdk-cmake = "3.22.3"' >> ./conf/local.conf
          echo 'LICENSE_FLAGS_WHITELIST = "commercial"' >> ./conf/local.conf
          echo '********** ./conf/local.conf **********'
          cat ./conf/local.conf
          echo '***************************************'
          rm ./conf/bblayers.conf
          touch ./conf/bblayers.conf
          echo 'LCONF_VERSION = "6"' >> ./conf/bblayers.conf
          echo '' >> ./conf/bblayers.conf
          echo 'BBPATH = "${TOPDIR}"' >> ./conf/bblayers.conf
          echo '' >> ./conf/bblayers.conf
          echo 'BBFILES ?= ""' >> ./conf/bblayers.conf
          echo 'BBLAYERS = " \' >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/poky/meta \ " >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/poky/meta-poky \ " >> ./conf/bblayers.conf
          echo '  \' >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-openembedded/meta-oe \ " >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-openembedded/meta-multimedia \ " >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-openembedded/meta-python \ " >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-openembedded/meta-filesystems \ " >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-openembedded/meta-gnome \ " >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-openembedded/meta-networking \ " >> ./conf/bblayers.conf
          echo '  \' >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-freescale \ " >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-freescale-3rdparty \ " >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-freescale-distro \ " >> ./conf/bblayers.conf
          echo '  \' >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-qt5 \ " >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-swupdate \ " >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-virtualization \ " >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-variscite-fslc \ " >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-variscite-hab \ " >> ./conf/bblayers.conf
          echo '  \' >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-clang \ " >> ./conf/bblayers.conf
          echo "  ${RUNNER_WORKSPACE}/${{ env.MACHINE }}/sources/meta-flutter-plugins \ " >> ./conf/bblayers.conf
          echo "  ${GITHUB_WORKSPACE} \ " >> ./conf/bblayers.conf
          echo '"' >> ./conf/bblayers.conf
          echo '***************************************'
          cat ./conf/bblayers.conf
          echo '***************************************'

      - name: Build Base Image
        shell: bash
        working-directory: ../${{ env.MACHINE }}
        run: |
          . sources/poky/oe-init-build-env build
          bitbake fsl-image-gui
          rm -rf /home/dev/artifacts/*

      - name: Build flutter-engine
        shell: bash
        working-directory: ../${{ env.MACHINE }}
        run: |
          . sources/poky/oe-init-build-env build
          bitbake flutter-engine -c do_cleansstate
          bitbake flutter-engine
          rm -rf /home/dev/artifacts/*
          cp tmp/deploy/rpm/aarch64/flutter-engine-git*.rpm /home/dev/artifacts

      - name: Publish flutter-engine artifacts
        uses: actions/upload-artifact@v3
        with:
          name: flutter-engine-imx8mm-var-dart
          path: |
             /home/dev/artifacts/*.rpm
      
      - name: Build flutter-auto
        shell: bash
        working-directory: ../${{ env.MACHINE }}
        run: |
          . sources/poky/oe-init-build-env build
          bitbake flutter-auto -c do_cleansstate
          bitbake flutter-auto
          rm -rf /home/dev/artifacts/*
          cp tmp/deploy/rpm/aarch64_mx8mm/flutter-auto-git*.rpm /home/dev/artifacts

      - name: Publish flutter-auto artifacts
        uses: actions/upload-artifact@v3
        with:
          name: flutter-auto-imx8mm-var-dart
          path: |
             /home/dev/artifacts/*.rpm

      - name: Build flutter-pi
        shell: bash
        working-directory: ../${{ env.MACHINE }}
        run: |
          . sources/poky/oe-init-build-env build
          bitbake flutter-pi -c do_cleansstate
          bitbake flutter-pi
          rm -rf /home/dev/artifacts/*
          cp tmp/deploy/rpm/aarch64_mx8mm/flutter-pi-git*.rpm /home/dev/artifacts

      - name: Publish flutter-pi artifacts
        uses: actions/upload-artifact@v3
        with:
          name: flutter-pi-imx8mm-var-dart
          path: |
             /home/dev/artifacts/*.rpm

      - name: Build flutter-gallery
        shell: bash
        working-directory: ../${{ env.MACHINE }}
        run: |
          . sources/poky/oe-init-build-env build
          bitbake flutter-sdk-native -c do_cleansstate
          bitbake flutter-gallery -c do_cleansstate
          bitbake flutter-gallery
          rm -rf /home/dev/artifacts/*
          cp tmp/deploy/rpm/aarch64/flutter-gallery-git*.rpm /home/dev/artifacts
      
      - name: Publish flutter-gallery artifacts
        uses: actions/upload-artifact@v3
        with:
          name: flutter-gallery-imx8mm-var-dart
          path: |
             /home/dev/artifacts/*.rpm

      - name: Build Image with Flutter
        shell: bash
        working-directory: ../${{ env.MACHINE }}
        run: |
          . sources/poky/oe-init-build-env build
          echo 'IMAGE_INSTALL_append = " flutter-engine"' >> ./conf/local.conf
          echo 'IMAGE_INSTALL_append = " flutter-gallery"' >> ./conf/local.conf
          echo 'IMAGE_INSTALL_append = " flutter-auto"' >> ./conf/local.conf
          echo 'IMAGE_INSTALL_append = " flutter-pi"' >> ./conf/local.conf
          echo 'IMAGE_INSTALL_append = " adwaita-icon-theme-cursors"' >> ./conf/local.conf
          bitbake fsl-image-gui
          rm -rf /home/dev/artifacts/*
          cp tmp/deploy/images/${{ env.MACHINE }}/fsl-image-gui-${{ env.MACHINE }}-*.rootfs.wic.gz /home/dev/artifacts

      - name: Publish bootable SD card image
        uses: actions/upload-artifact@v3
        with:
          name: fsl-image-gui-${{ env.MACHINE }}-flutter-sdimage
          path: |
             /home/dev/artifacts/*

      - name: Build fsl-image-gui SDK
        shell: bash
        working-directory: ../${{ env.MACHINE }}
        run: |
          . sources/poky/oe-init-build-env build
          bitbake fsl-image-gui -c do_populate_sdk
          rm -rf /home/dev/artifacts/*
          cp tmp/deploy/sdk/fslc-wayland-glibc-x86_64-fsl-image-gui-aarch64-${{ env.MACHINE }}-*.sh /home/dev/artifacts/

      - name: Publish fsl-image-gui SDK artifact
        uses: actions/upload-artifact@v3
        with:
          name: fsl-image-gui-${{ env.MACHINE }}-flutter-sdk-linux
          path: |
             /home/dev/artifacts/*
